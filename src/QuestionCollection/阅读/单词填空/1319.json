{"code": 200, "data": {"questionId": 1319, "questionType": 8, "typeName": "\u5355\u8bcd\u586b\u7a7a", "occurrence": 181, "isOccur": 0, "collectColorType": null, "practiceCount": 2, "createTime": "2020-11-11T13:59:00.000+00:00", "isVip": "1", "probationTotalCount": 0, "userProbationCountLeft": 0, "questionStatus": null, "ownerFlag": null, "similarToQuestionIdList": null, "title": "\u952e\u5165\u7f3a\u5c11\u7684\u5b57\u6bcd\uff0c\u5b8c\u6210\u4e0b\u9762\u7684\u6587\u5b57", "duration": 180, "difficulty": 3, "difficultyName": "\u96be\uff08120\u4ee5\u4e0a\uff09", "blankContent": "A similar method operating on the same principle uses rectangles instead of arbitrary border shapes. It ____ usually ____ than ____ tracing ____ it ____ fewer ____ to ____ out ____ rectangle. It ____ inefficient, however, because ____ are ____ rectangular, and ____ some ____ can ____ missed. This issue can be minimized by creating a recursive algorithm that, if a rectangle border fails, will subdivide it into four smaller rectangles and test those, and either fill each or subdivide again and repeat the process.", "partBlankContent": "A similar method operating on the same principle uses rectangles instead of arbitrary border shapes. It i_ usually fas___ than boun____ tracing bec____ it requ____ fewer calcul______ to wo__ out t__ rectangle. It i_ inefficient, however, because bound_____ are n__ rectangular, and s_ some ar___ can b_ missed. This issue can be minimized by creating a recursive algorithm that, if a rectangle border fails, will subdivide it into four smaller rectangles and test those, and either fill each or subdivide again and repeat the process.", "fullContent": "\nA similar method operating on the same principle uses rectangles instead of arbitrary border shapes. It is usually faster than boundary tracing because it requires fewer calculations to work out the rectangle. It is inefficient, however, because boundaries are not rectangular, and so some areas can be missed. This issue can be minimized by creating a recursive algorithm that, if a rectangle border fails, will subdivide it into four smaller rectangles and test those, and either fill each or subdivide again and repeat the process.", "answer": "\u57fa\u4e8e\u76f8\u540c\u539f\u7406\u7684\u7c7b\u4f3c\u65b9\u6cd5\u4f7f\u7528\u77e9\u5f62\u800c\u4e0d\u662f\u4efb\u610f\u7684\u8fb9\u754c\u5f62\u72b6\u3002\u5b83\u901a\u5e38\u6bd4\u8fb9\u754c\u8ddf\u8e2a\u5feb\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u66f4\u5c11\u7684\u8ba1\u7b97\u6765\u8ba1\u7b97\u77e9\u5f62\u3002\u7136\u800c\uff0c\u8fd9\u662f\u4f4e\u6548\u7684\uff0c\u56e0\u4e3a\u8fb9\u754c\u4e0d\u662f\u77e9\u5f62\u7684\uff0c\u6240\u4ee5\u4e00\u4e9b\u533a\u57df\u53ef\u80fd\u4f1a\u88ab\u9057\u6f0f\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u9012\u5f52\u7b97\u6cd5\u6765\u6700\u5c0f\u5316\uff0c\u5982\u679c\u4e00\u4e2a\u77e9\u5f62\u8fb9\u754c\u5931\u8d25\uff0c\u5c06\u628a\u5b83\u7ec6\u5206\u4e3a\u56db\u4e2a\u66f4\u5c0f\u7684\u77e9\u5f62\u5e76\u6d4b\u8bd5\u5b83\u4eec\uff0c\u586b\u5145\u6bcf\u4e2a\u77e9\u5f62\u6216\u518d\u6b21\u7ec6\u5206\u5e76\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002", "options": [{"letterSize": 1, "word": "is"}, {"letterSize": 3, "word": "faster"}, {"letterSize": 4, "word": "boundary"}, {"letterSize": 3, "word": "because"}, {"letterSize": 4, "word": "requires"}, {"letterSize": 6, "word": "calculations"}, {"letterSize": 2, "word": "work"}, {"letterSize": 1, "word": "the"}, {"letterSize": 1, "word": "is"}, {"letterSize": 5, "word": "boundaries"}, {"letterSize": 1, "word": "not"}, {"letterSize": 1, "word": "so"}, {"letterSize": 2, "word": "areas"}, {"letterSize": 1, "word": "be"}]}, "msg": "\u8bf7\u6c42\u6210\u529f\uff01"}