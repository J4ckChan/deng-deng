{"code": 200, "data": {"questionId": 2082, "questionType": 8, "typeName": "\u5355\u8bcd\u586b\u7a7a", "occurrence": 30, "isOccur": 0, "collectColorType": 4, "practiceCount": 1, "createTime": "2020-11-12T02:42:00.000+00:00", "isVip": "1", "probationTotalCount": 0, "userProbationCountLeft": 0, "questionStatus": null, "ownerFlag": null, "similarToQuestionIdList": null, "title": "\u952e\u5165\u7f3a\u5c11\u7684\u5b57\u6bcd\uff0c\u5b8c\u6210\u4e0b\u9762\u7684\u6587\u5b57", "duration": 180, "difficulty": 2, "difficultyName": "\u4e00\u822c\uff08105~115\uff09", "blankContent": "Indices are usually not considered part of the database, as they are considered an implementation detail, though indices are usually maintained by the same group that maintains the other parts of the database. It ____ be ____ that ____ of ____ indexes ____ both ____ and ____ keys ____ dramatically ____ query ____. This is because B-tree indexes result in query times proportional to log(n) where n is the number of rows in a table and hash indexes result in constant time queries (no size dependency as long as the relevant part of the index fits into memory).", "partBlankContent": "Indices are usually not considered part of the database, as they are considered an implementation detail, though indices are usually maintained by the same group that maintains the other parts of the database. It sho___ be no___ that u__ of effi_____ indexes o_ both pri____ and for____ keys c__ dramatically imp____ query perfo______. This is because B-tree indexes result in query times proportional to log(n) where n is the number of rows in a table and hash indexes result in constant time queries (no size dependency as long as the relevant part of the index fits into memory).", "fullContent": "\nIndices are usually not considered part of the database, as they are considered an implementation detail, though indices are usually maintained by the same group that maintains the other parts of the database. It should be noted that use of efficient indexes on both primary and foreign keys can dramatically improve query performance. This is because B-tree indexes result in query times proportional to log(n) where n is the number of rows in a table and hash indexes result in constant time queries (no size dependency as long as the relevant part of the index fits into memory).", "answer": "\u7d22\u5f15\u901a\u5e38\u4e0d\u88ab\u8ba4\u4e3a\u662f\u6570\u636e\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\uff0c\u5c3d\u7ba1\u7d22\u5f15\u901a\u5e38\u7531\u7ef4\u62a4\u6570\u636e\u5e93\u5176\u4ed6\u90e8\u5206\u7684\u540c\u4e00\u7ec4\u7ef4\u62a4\u3002\u5e94\u8be5\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e3b\u952e\u548c\u5916\u952e\u4e0a\u4f7f\u7528\u9ad8\u6548\u7d22\u5f15\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u67e5\u8be2\u6027\u80fd\u3002\u8fd9\u662f\u56e0\u4e3aB-tree\u7d22\u5f15\u4ea7\u751f\u7684\u67e5\u8be2\u65f6\u95f4\u4e0elog(n)\u6210\u6b63\u6bd4\uff0c\u5176\u4e2dn\u662f\u8868\u4e2d\u7684\u884c\u6570\uff0c\u800c\u54c8\u5e0c\u7d22\u5f15\u4ea7\u751f\u7684\u67e5\u8be2\u65f6\u95f4\u662f\u5e38\u6570(\u53ea\u8981\u7d22\u5f15\u7684\u76f8\u5173\u90e8\u5206\u9002\u5408\u4e8e\u5185\u5b58\uff0c\u5c31\u6ca1\u6709\u5927\u5c0f\u4f9d\u8d56\u5173\u7cfb)\u3002", "options": [{"letterSize": 3, "word": "should"}, {"letterSize": 2, "word": "noted"}, {"letterSize": 1, "word": "use"}, {"letterSize": 4, "word": "efficient"}, {"letterSize": 1, "word": "on"}, {"letterSize": 3, "word": "primary"}, {"letterSize": 3, "word": "foreign"}, {"letterSize": 1, "word": "can"}, {"letterSize": 3, "word": "improve"}, {"letterSize": 5, "word": "performance"}]}, "msg": "\u8bf7\u6c42\u6210\u529f\uff01"}