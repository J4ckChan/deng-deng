{"code": 200, "data": {"questionId": 1444, "questionType": 8, "typeName": "\u5355\u8bcd\u586b\u7a7a", "occurrence": 63, "isOccur": 0, "collectColorType": null, "practiceCount": 1, "createTime": "2020-11-11T16:04:00.000+00:00", "isVip": "1", "probationTotalCount": 0, "userProbationCountLeft": 0, "questionStatus": null, "ownerFlag": null, "similarToQuestionIdList": null, "title": "\u952e\u5165\u7f3a\u5c11\u7684\u5b57\u6bcd\uff0c\u5b8c\u6210\u4e0b\u9762\u7684\u6587\u5b57", "duration": 180, "difficulty": 3, "difficultyName": "\u96be\uff08120\u4ee5\u4e0a\uff09", "blankContent": "Test-driven development offers more than just simple validation of correctness, but can also drive the design of a program. By ____ on ____ test ____ first, one ____ imagine ____ the ____ will ____ used ____ clients ( in ____ first ____, ____ test ____ ). So, the ____ is ____ with ____ interface ____ the ____. This benefit is complementary to Design by Contract as it approaches code through test cases rather than through mathematical assertions or preconceptions.", "partBlankContent": "Test-driven development offers more than just simple validation of correctness, but can also drive the design of a program. By focu____ on t__ test ca___ first, one mu__ imagine h__ the functi_______ will b_ used b_ clients ( in t__ first ca__, t__ test ca___ ). So, the progr_____ is conc_____ with t__ interface bef___ the impleme_______. This benefit is complementary to Design by Contract as it approaches code through test cases rather than through mathematical assertions or preconceptions.", "fullContent": "\nTest-driven development offers more than just simple validation of correctness, but can also drive the design of a program. By focusing on the test cases first, one must imagine how the functionality will be used by clients ( in the first case, the test cases ). So, the programmer is concerned with the interface before the implementation. This benefit is complementary to Design by Contract as it approaches code through test cases rather than through mathematical assertions or preconceptions.", "answer": "\u6d4b\u8bd5\u9a71\u52a8\u7684\u5f00\u53d1\u4e0d\u4ec5\u63d0\u4f9b\u5bf9\u6b63\u786e\u6027\u7684\u7b80\u5355\u9a8c\u8bc1\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u9a71\u52a8\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u3002\u901a\u8fc7\u9996\u5148\u5173\u6ce8\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5fc5\u987b\u60f3\u8c61\u5ba2\u6237\u7aef\u5c06\u5982\u4f55\u4f7f\u7528\u8be5\u529f\u80fd\uff08\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\u4e3a\u6d4b\u8bd5\u7528\u4f8b\uff09\u3002\u56e0\u6b64\uff0c\u7a0b\u5e8f\u5458\u5728\u5b9e\u73b0\u4e4b\u524d\u8981\u5148\u5173\u6ce8\u63a5\u53e3\u3002\u8fd9\u79cd\u597d\u5904\u662f\u5bf9\u201c\u6309\u5408\u540c\u8bbe\u8ba1\u201d\u7684\u8865\u5145\uff0c\u56e0\u4e3a\u5b83\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\u800c\u4e0d\u662f\u901a\u8fc7\u6570\u5b66\u65ad\u8a00\u6216\u5148\u5165\u4e4b\u89c1\u6765\u63a5\u8fd1\u4ee3\u7801\u3002", "options": [{"letterSize": 4, "word": "focusing"}, {"letterSize": 1, "word": "the"}, {"letterSize": 2, "word": "cases"}, {"letterSize": 2, "word": "must"}, {"letterSize": 1, "word": "how"}, {"letterSize": 6, "word": "functionality"}, {"letterSize": 1, "word": "be"}, {"letterSize": 1, "word": "by"}, {"letterSize": 1, "word": "the"}, {"letterSize": 2, "word": "case"}, {"letterSize": 1, "word": "the"}, {"letterSize": 2, "word": "cases"}, {"letterSize": 5, "word": "programmer"}, {"letterSize": 4, "word": "concerned"}, {"letterSize": 1, "word": "the"}, {"letterSize": 3, "word": "before"}, {"letterSize": 7, "word": "implementation"}]}, "msg": "\u8bf7\u6c42\u6210\u529f\uff01"}